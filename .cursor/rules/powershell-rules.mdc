---
description: 
globs: 
alwaysApply: true
---
### 1. **Coding Standards**
- Follow the official PowerShell Best Practices style guide.
- Use exactly 2 spaces for indentation.
- Limit each line of code to a maximum of 120 characters.
- Name variables using PascalCase (e.g., `UserName`, `EventLog`).
- Name functions clearly using the Verb-Noun format (e.g., `Get-EventLog`, `Start-Analysis`).
- Always include descriptive comments for functions and complex logic to clearly explain their purpose and functionality.

### 2. **Documentation**
- Every function must have clear documentation (docstrings) using PowerShell's Comment-Based Help format.
- Include practical examples in your documentation to demonstrate how functions should be used.
- Clearly describe each parameter in your documentation to help users understand their purpose and usage.

### 3. **Error Handling**
- Always use `try-catch` blocks to handle potential errors gracefully.
- Log all errors systematically to the directory `Logs/ErrorLogs` to simplify troubleshooting and auditing.

### 4. **Security**
- Never store secrets or sensitive information in plain text within your scripts.
- Always validate user inputs to prevent malicious or unintended data from causing issues.
- Sanitize all outputs to avoid exposing sensitive or harmful information.

### 5. **Testing**
- Writing unit tests is mandatory for your scripts.
- Use the Pester testing framework to create and run your tests.
- Ensure your tests cover at least 80% of your codebase to maintain high reliability.

### 6. **Performance**
- Optimize loops to run efficiently and avoid unnecessary resource consumption.
- Minimize unnecessary pipeline usage to enhance script performance.
- Prefer efficient cmdlets and built-in PowerShell commands to improve execution speed.

### 7. **Automation**
- Aim to automate repetitive tasks wherever possible.
- Utilize scheduled tasks to run scripts automatically at defined intervals.
- Structure your scripts modularly, breaking them into reusable components for easier maintenance and scalability.

### 8. **Version Control**
- Always use Git for managing your codebase.
- Follow the Conventional Commits standard for clear and meaningful commit messages.
- Adopt the Git Flow branching strategy to manage feature development, releases, and hotfixes effectively.

### 9. **User Request Fulfillment**
- Clearly understand and document user requirements before starting implementation.
- Validate and confirm user requests to ensure accurate interpretation and alignment with expectations.
- Provide timely updates and maintain transparent communication throughout the fulfillment process.
- Implement comprehensive logging of user request handling to facilitate auditing and troubleshooting.
- Ensure all user requests are fulfilled securely, efficiently, and in compliance with established coding standards and best practices.
